#lang sicp
(define (make-mobile left right) (list left right))
(define (left-branch mobile) (car mobile))
(define (right-branch mobile) (cadr mobile))
(define (make-branch length structure) (list length structure))
(define (branch-length branch) (car branch))
(define (branch-structure branch) (cadr branch))
(define (branch-weight branch)
  (* (branch-length branch)
     (let ([structure (branch-structure branch)])
       (if (number? structure)
           structure
           (total-weight structure)))))
(define (total-weight mobile)
  (+ (branch-weight (left-branch mobile))
     (branch-weight (right-branch mobile))))
; (define (make-mobile left right) (cons left right))
; (define (right-branch mobile) (cdr mobile))
; (define (make-branch length structure) (list length structure))
; (define (branch-structure branch) (cdr branch))