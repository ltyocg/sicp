#lang sicp
(define (prime? n)
  (define (fast-prime? n times)
    (define (fermat-test n)
      (define (square x) (* x x))
      (define (expmod base exp m)
        (cond ((= exp 0) 1)
              ((even? exp)
               (remainder (square (expmod base (/ exp 2) m)) m))
              (else
               (remainder (* base (expmod base (dec exp) m)) m))))
      (define (try-it a)
        (define (miller-rabin-check base p)
          (define (iter n)
            (define (ring-equals r) (or (= 1 r) (= (dec p) r)))
            (or (<= n base)
                (and (ring-equals (expmod base n p))
                     (iter (/ (if (even? n) n (dec n)) 2)))))
          (iter (dec p)))
        (and (miller-rabin-check 2 n)
             (= (expmod a n n) a)))
      (try-it (inc (random (dec n)))))
    (cond ((= times 0) #t)
          ((fermat-test n) (fast-prime? n (dec times)))
          (else #f)))
  (fast-prime? n 1))
(define (filtered-accumulate combiner null-value term a next b filter)
  (if (> a b)
      null-value
      (combiner
       (let ((num (term a)))
         (if (filter num) num null-value))
       (filtered-accumulate combiner null-value term (next a) next b filter))))
(filtered-accumulate + 0 identity 2 inc 99 prime?)