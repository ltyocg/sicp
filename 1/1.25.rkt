#lang sicp
(define (fermat-test n)
  (define (fast-expt b n)
    (define (square x) (* x x))
    (define (iter b n a)
      (cond ((= n 0) a)
            ((even? n) (iter (square b) (/ n 2) a))
            (else (iter b (dec n) (* a b)))))
    (iter b n 1))
  (define (expmod base exp m)
    (remainder (fast-expt base exp) m))
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (inc (random (dec n)))))
(define (fast-prime? n times)
  (cond ((= times 0) #t)
        ((fermat-test n) (fast-prime? n (dec times)))
        (else #f)))
(define (timed-prime-test n)
  (newline)
  (display n)
  (define (start-prime-test n start-time)
    (define (report-prime elapsed-time)
      (display " *** ")
      (display elapsed-time))
    (if (fast-prime? n 1)
        (report-prime (- (runtime) start-time))))
  (start-prime-test n (runtime)))